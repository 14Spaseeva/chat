package org.study.stasy.ClientGUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.study.stasy.ChatMessage;
import org.study.stasy.Exeptions.ClientException;
import org.study.stasy.app.Client;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;

/**
 * Created by ASPA on 03.05.2017.
 */
public class ClientApp extends JFrame {
    private static Logger log = LoggerFactory.getLogger(Client.class.getSimpleName());
    private JPanel startPane;

    private String host = "localhost";
    private String port = "6658";
    private JPanel rootPanel;
    private Client user;
    private String userName;
    private JButton sendButton;
    private JTextField messageBox; //многострочное текстовое поле
    private JTextPane chatPane;  //текстовый редактор со стилям

    private static final String EXIT_MSG = "@exit";


    private ClientApp() {
        loginWindow();

    }

    private JTextField loginField;
    private JFrame startFrame;
    private JButton loginButton;
    private JTextField portFiels;
    private JTextField hostField;

    private void loginWindow() {

        startPane = new JPanel();
        startPane.setLayout(new BorderLayout());

        startFrame = new JFrame("Log in, please");
        startFrame.setSize(300, 90);
        startFrame.setLocation(700, 400);
        startFrame.setUndecorated(true);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        loginField = new JTextField("username", 15);
        loginField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    userName = loginField.getText();
                    host = hostField.getText();
                    port = portFiels.getText();
                    if (userName.length() < 1) {
                        JOptionPane.showMessageDialog(loginButton, "Please, Enter ur nickname",
                                "Nick Name is invalid", JOptionPane.ERROR_MESSAGE);
                    } else {
                        startFrame.setVisible(false);
                        mainWindow();
                    }
                }
            }
        });
        loginButton = new JButton("Connect!");
        loginButton.addActionListener(new loginButtonListener());

        hostField = new JTextField(host, 10);
        hostField.setEditable(false);
        portFiels = new JTextField(port, 10);
        portFiels.setEditable(false);

        JPanel clientData = new JPanel(new GridBagLayout());
        clientData.setBackground(Color.BLUE);
        clientData.setLayout(new GridBagLayout());


        GridBagConstraints startRight = new GridBagConstraints();
        startRight.insets = new Insets(0, 0, 0, 10);
        startRight.anchor = GridBagConstraints.EAST;
        GridBagConstraints startLeft = new GridBagConstraints();
        startLeft.insets = new Insets(0, 10, 0, 10);
        startLeft.anchor = GridBagConstraints.WEST;
        startRight.fill = GridBagConstraints.VERTICAL;
        startRight.gridwidth = GridBagConstraints.REMAINDER;


        clientData.add(loginField, startLeft);
        clientData.add(loginButton, startRight);

        JPanel systemData = new JPanel(new GridBagLayout());
        systemData.add(hostField, startLeft);
        systemData.add(portFiels, startRight);


        startFrame.add(BorderLayout.NORTH, clientData);
        startFrame.add(BorderLayout.SOUTH, systemData);


        startFrame.setVisible(true);

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    }

    private class loginButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            userName = loginField.getText();
            host = hostField.getText();
            port = portFiels.getText();
            if (userName.length() < 1) {
                JOptionPane.showMessageDialog(loginButton, "Nickname should consist of more than 1 symbol",
                        "Nick Name is invalid", JOptionPane.ERROR_MESSAGE);
            } else {
                startFrame.setVisible(false);
                mainWindow();
            }
        }
    }

    private void mainWindow() {
        setVisible(true);
        rootPanel = new JPanel();
        rootPanel.setLayout(new BorderLayout());

        this.setSize(600, 300);
        this.setLocation(700, 400);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        this.setVisible(true);

        JPanel southPanel = new JPanel(); //нижняя
        //   this.add(BorderLayout.SOUTH, southPanel);
        southPanel.setBackground(Color.BLUE);
        southPanel.setLayout(new GridBagLayout());

        messageBox = new JTextField("", 50);
        messageBox.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    try {
                        sendMsg();
                    } catch (IOException e1) {
                        log.error("sendmsg error", e);
                    }
                    try {
                        recieveConfirm();

                    } catch (IOException | ClassNotFoundException e1) {
                        log.error("recieve error");
                    }
                }
            }
        });
        messageBox.requestFocus();
        sendButton = new JButton("Send =)");
        sendButton.addActionListener(new ClientApp.ButtonActionSendMsg());

        chatPane = new JTextPane();
        chatPane.setEditable(false);
        //   this.add(new JScrollPane(chatPane), BorderLayout.CENTER);

        rootPanel.add(new JScrollPane(chatPane), BorderLayout.CENTER);

        GridBagConstraints left = new GridBagConstraints();
        left.anchor = GridBagConstraints.LINE_START;
        left.fill = GridBagConstraints.HORIZONTAL;
        left.weightx = 512;
        left.weighty = 1;

        GridBagConstraints right = new GridBagConstraints();
        right.insets = new Insets(0, 10, 0, 0);
        right.anchor = GridBagConstraints.LINE_END;
        right.fill = GridBagConstraints.NONE;
        right.weightx = 2;
        right.weighty = 2;

        // messageBox.setSize(200, 30);
        southPanel.add(messageBox, left);
        southPanel.add(sendButton, right);

        rootPanel.add(BorderLayout.SOUTH, southPanel);

        this.add(rootPanel);


        try {
            user = new Client(host, port);
        } catch (ClientException e) {
            e.printStackTrace();
        }
        chatPane.setText(user.getUserName());

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    user.sendMsg(EXIT_MSG);
                    System.exit(0);
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }
        }); //закрытие окна через крестик

        setVisible(true);
    }

    private void sendMsg() throws IOException {
        String text = messageBox.getText();
        user.sendMsg(text);
        chatPane.setText(String.format("%s\n>>>\t%s", chatPane.getText(), text));
        messageBox.setText("");
    }

    private void recieveConfirm() throws IOException, ClassNotFoundException {
        ChatMessage chatMessage = user.recieveMsg();
        chatPane.setText(String.format("%s\t\t%s", chatPane.getText(), chatMessage.getMessage()));
    }



    class ButtonActionSendMsg implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                sendMsg();
            } catch (IOException e1) {
                log.error("sendmsg error", e);
            }
            try {
                recieveConfirm();

            } catch (IOException | ClassNotFoundException e1) {
                log.error("recieve error");
            }
        }


    }

    public static void main(String[] args) {

        ClientApp app = new ClientApp();

    }

}
