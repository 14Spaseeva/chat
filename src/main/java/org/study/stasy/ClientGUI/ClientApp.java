package org.study.stasy.ClientGUI;

import com.intellij.uiDesigner.core.GridLayoutManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.study.stasy.ChatMessage;
import org.study.stasy.Exeptions.ClientException;
import org.study.stasy.UserName;
import org.study.stasy.app.Client;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.time.LocalDateTime;
import java.util.Objects;

import static java.lang.System.out;
import static org.study.stasy.app.Server.getUserList;

/**
 * Created by ASPA on 03.05.2017.
 */
public class ClientApp extends JFrame {
    private static Logger log = LoggerFactory.getLogger(Client.class.getSimpleName());
    private JPanel startPane;

    private String host = "localhost";
    private String port = "6657";
    private JPanel rootPanel;
    private Client user = null;
    private String userName;
    private JButton sendButton;
    private JTextField messageBox; //многострочное текстовое поле
    private JTextPane chatPane;  //текстовый редактор со стилям

    private static final String EXIT_MSG = "@exit";

    private ClientApp() throws IOException, ClassNotFoundException {

        this.mainWindow();
    }

    private JTextField loginField;
    private JButton loginButton;

    private JTextField portFiels;
    private JTextField hostField;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    }


    private class loginButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            loginAction();
        }
    }

    private void mainWindow() throws IOException, ClassNotFoundException {

        loginField = new JTextField("username", 15);
        loginField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    loginAction();
                }
            }

        });


        loginButton = new JButton("Connect");
        loginButton.addActionListener(new loginButtonListener());

        hostField = new JTextField(host, 10);
        hostField.setEditable(false);
        portFiels = new JTextField(port, 10);
        portFiels.setEditable(false);

        JPanel clientData = new JPanel(new GridBagLayout());
        clientData.setLayout(new GridBagLayout());


        GridBagConstraints startRight = new GridBagConstraints();
        startRight.insets = new Insets(0, 0, 0, 10);

        startRight.anchor = GridBagConstraints.EAST;

        GridBagConstraints startLeft = new GridBagConstraints();
        startLeft.insets = new Insets(0, 10, 0, 10);

        startLeft.anchor = GridBagConstraints.WEST;
        startRight.fill = GridBagConstraints.VERTICAL;
        startRight.gridwidth = GridBagConstraints.REMAINDER;


        clientData.add(loginField, startLeft);
        clientData.add(loginButton, startRight);
        clientData.setBackground(Color.darkGray);

        JPanel systemData = new JPanel(new GridBagLayout());
        systemData.add(hostField, startLeft);
        systemData.add(portFiels, startRight);
        JPanel loginPanel = new JPanel(new GridBagLayout());

        loginPanel.setBackground(Color.darkGray);

        loginPanel.add(systemData, startLeft);
        loginPanel.add(clientData, startRight);

        setVisible(true);

        rootPanel = new JPanel();
        rootPanel.setLayout(new BorderLayout());
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        this.setSize(600, 300);
        this.setLocation(700, 400);

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        // this.setVisible(true);

        JPanel southPanel = new JPanel(); //нижняя
        southPanel.setBackground(Color.lightGray);
        southPanel.setLayout(new GridBagLayout());

        messageBox = new JTextField("", 50);
        messageBox.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    try {
                        sendMsg();
                    } catch (IOException e1) {
                        log.error("sendmsg error", e);
                    } catch (ClientException e1) {
                        e1.printStackTrace();
                    }

                }
            }
        });
        messageBox.requestFocus();
        sendButton = new JButton();
        sendButton.setIcon(new ImageIcon("D:\\idea projects\\chat\\target\\classes\\1457631818_send.png"));
        sendButton.setToolTipText("Send Message");

        sendButton.addActionListener(new ClientApp.ButtonActionSendMsg());
        chatPane = new JTextPane();
        chatPane.setEditable(false);

        //   this.add(new JScrollPane(chatPane), BorderLayout.CENTER);
        this.setResizable(false);
        rootPanel.add(new
                JScrollPane(chatPane), BorderLayout.CENTER);
        GridBagConstraints left = new GridBagConstraints();
        left.anchor = GridBagConstraints.LINE_START;
        left.fill = GridBagConstraints.HORIZONTAL;
        left.weightx = 512;
        left.weighty = 1;

        GridBagConstraints right = new GridBagConstraints();
        right.insets = new Insets(0, 10, 0, 0);

        right.anchor = GridBagConstraints.LINE_END;
        right.fill = GridBagConstraints.NONE;
        right.weightx = 2;
        right.weighty = 2;

        // messageBox.setSize(200, 30);
        southPanel.add(messageBox, left);
        southPanel.add(sendButton, right);

        rootPanel.add(BorderLayout.SOUTH, southPanel);
        rootPanel.add(BorderLayout.NORTH, loginPanel);
        this.add(rootPanel);
        this.setTitle("Group chat\t Spaseeva Anastasiia\t33507/1");

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    user.sendMsg(EXIT_MSG);
                    getUserList().deleteUser(userName);
                    user.shutDownClient();
                    flag = false;
                    System.exit(0);
                } catch (IOException | ClientException e1) {
                    e1.printStackTrace();
                }
            }
        }); //закрытие окна через крестик


        try {
            user = new Client(host, port);
            userName = user.getUserName();
            flag = true;

        } catch (ClientException e1) {
            e1.printStackTrace();
        }
        setVisible(true);


    }

    private boolean flag = false;

    private void loginAction() {
        if (loginButton.getText().equals("Connect")) {
            loginButton.setText("Reset");
            userName = loginField.getText();
            host = hostField.getText();
            port = portFiels.getText();
            if (userName.length() < 1) {
                JOptionPane.showMessageDialog(loginButton, "Please, Enter ur nickname",
                        "Nick Name is invalid", JOptionPane.ERROR_MESSAGE);
            }
            try {
                user = new Client(host, port);
                flag = true;

            } catch (ClientException e1) {
                e1.printStackTrace();
            }
        } else {
            loginButton.setText("Connect");

            try {
                user.shutDownClient();
                flag = false;
            } catch (ClientException e) {
                e.printStackTrace();
            }
            getUserList().deleteUser(userName);
            setVisible(true);
        }

    }

    private static final String STOP_MSG = "@exit";

    private void sendMsg() throws IOException, ClientException {
        String text = messageBox.getText();
        user.sendMsg(text);
        if (!Objects.equals(text, STOP_MSG)) {
            chatPane.setText(String.format("%s\n[%s] [Я]: \t%s", chatPane.getText(), LocalDateTime.now(), text));
            chatPane.setCaretPosition(chatPane.getText().length());
            messageBox.setText("");
        } else {
            user.shutDownClient();
            flag = false;
            //TODO доделать диалоговое окно
            JDialog dialog = new JDialog();
            dialog.setVisible(true);
        }
    }

    public void listen() throws IOException, ClassNotFoundException {
        ChatMessage s;
        ObjectInputStream objIn = (ObjectInputStream) user.getIutputStream();
        while ((s = (ChatMessage) objIn.readObject()) != null) {
            chatPane.setText(String.format("%s\n[%s][%s]: \t%s", chatPane.getText(),
                    LocalDateTime.now(), s.getUserName(), s.getMessage()));
            chatPane.setCaretPosition(chatPane.getText().length());
        }
        objIn.close();
      /*  try {
            user.shutDownClient();
        } catch (Exception e) {
            e.printStackTrace();
        }*/
        System.err.println("Closed client socket");
    }

    /*private void recieveConfirm() throws IOException, ClassNotFoundException {
        ChatMessage chatMessage = user.recieveMsg();
        chatPane.setText(String.format("%s\t\t%s", chatPane.getText(), chatMessage.getMessage()));
    }
*/


    class ButtonActionSendMsg implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                sendMsg();
            } catch (IOException e1) {
                log.error("sendmsg error", e);
            } catch (ClientException e1) {
                e1.printStackTrace();
            }
        }


    }

    private void run(ClientApp app) {

    }

    private Client getUser() {
        return user;
    }

    public static void main(String[] args) throws IOException, ClassNotFoundException {

        ClientApp app = new ClientApp();
        //   app.listen();

        //TODO как вызвать app.listen(); если клиент создается только после логина, a listen() юзает user??

    }

}
